// ğŸ”” Fonction d'alerte globale
function showAlert(title, text, icon) {
    return Swal.fire({
        title: title,
        text: text,
        icon: icon,
        confirmButtonText: "OK"
    });
}

let logoutTimer;

function resetTimer() {
    clearTimeout(logoutTimer);
    logoutTimer = setTimeout(() => {
        // Envoyer une requÃªte au serveur pour dÃ©connecter l'utilisateur
        fetch('/logout', {
            method: 'POST',
            credentials: 'include' // Inclure les cookies dans la requÃªte
        })
        .then(response => {
            if (response.ok) {
                showAlert("DÃ©connexion", "Votre session a expirÃ© pour inactivitÃ©.", "info").then(() => {
                    window.location.href = "index.html"; // Rediriger vers la page de connexion
                });
            } else {
                console.error('Erreur lors de la dÃ©connexion');
            }
        })
        .catch(error => {
            console.error('Erreur rÃ©seau:', error);
        });
    }, 15 * 60 * 1000); // DÃ©connecter aprÃ¨s 15 minutes d'inactivitÃ©
}

// ğŸ”„ RÃ©initialiser le timer Ã  chaque activitÃ© de lâ€™utilisateur
document.addEventListener("mousemove", resetTimer);
document.addEventListener("keypress", resetTimer);
document.addEventListener("click", resetTimer);
document.addEventListener("scroll", resetTimer);

// VÃ©rification de la connexion
document.addEventListener("DOMContentLoaded", () => {
    // VÃ©rifier si l'utilisateur est dÃ©jÃ  hors ligne au chargement
    if (!navigator.onLine) {
        showAlert("ProblÃ¨me de connexion", "Vous Ãªtes hors ligne.", "error");
    }

    // Ã‰vÃ©nements pour dÃ©tecter les changements de connexion en temps rÃ©el
    window.addEventListener('offline', () => {
        showAlert("ProblÃ¨me de connexion", "Vous Ãªtes hors ligne.", "error");
    });

    window.addEventListener('online', () => {
        showAlert("Connexion rÃ©tablie", "Vous Ãªtes de nouveau en ligne.", "success");
    });
});